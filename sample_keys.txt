88 char base64 privkey shumkov example
merxAH//StaD9+1qDL28bZefAXz76N2e4dT3Tvo6NFesv0HGhE4+tsSyS6MeJ1WSAGqrtLyQc1K5u++libVc+w== shumkov
brxoeME8kO0NPig2exAjaJp9Jj1jTozwDBmHyHPXgzCWGtZYsHVvfGPrvQgfnEPM51KY48AYrZhljdvvv5dnpw== masternode-4

64 bytes hex privkey shumkov example
99 ea f1 00 7f ff 4a d6 83 f7 ed 6a 0c bd bc 6d 97 9f 01 7c fb e8 dd 9e e1 d4 f7 4e fa 3a 34 57 ac bf 41 c6 84 4e 3e b6 c4 b2 4b a3 1e 27 55 92 00 6a ab b4 bc 90 73 52 b9 bb ef a5 89 b5 5c fb



44 char base64 pubkey from tendermint docs
uZ4h63OFWuQ36ZZ4Bd6NF+/w9fWUwrOncrQsackrsTk=

32 bytes hex public key 
b9 9e 21 eb 73 85 5a e4 37 e9 96 78 05 de 8d 17 ef f0 f5 f5 94 c2 b3 a7 72 b4 2c 69 c9 2b b1 39


crypto.generateKeyPairSync generated

MC4CAQAwBQYDK2VwBCIEI private prefix??? 21 char 
MCowBQYDK2VwAyEA      public prefix???  16 char

MC4CAQAwBQYDK2VwBCIEIEhVylEZ4LjxnoCIlT1EMF9FRYSe/A3eWITizlUYCbEe                         64x base64 der pkcs8 private
MCowBQYDK2VwAyEAHz7qr/OJmQywhIoh+iilEBxuEmVdtIpokO4BET76cYQ=                             60x base64 der spki public

MC4CAQAwBQYDK2VwBCIEIAiDa+uJew0e7w0wHTEkSf7smQScxeZyGn+VC31/ak3p
MCowBQYDK2VwAyEAK9HlPQjJg8ymMC0mt1zjDBWly6LZ7+cJXVXRiaCcC3k=

43 char privkey generated and cut, 43 chars, no padding, too short for privkey!!
EhVylEZ4LjxnoCIlT1EMF9FRYSe/A3eWITizlUYCbEe
AiDa+uJew0e7w0wHTEkSf7smQScxeZyGn+VC31/ak3p

????????
SOLUTION: https://github.com/tendermint/tendermint/issues/1999
????????

func (privKey PrivKeyEd25519) Generate(index int) PrivKeyEd25519 {
	bz := cdc.MustMarshalBinaryBare(struct {
		PrivKey [64]byte
		Index   int
	}{privKey, index})
	newBytes := crypto.Sha256(bz)
	newKey := new([64]byte)
	copy(newKey[:32], newBytes)
	return PrivKeyEd25519(*newKey)
}

	// If the latter 32 bytes of the privkey are all zero, compute the pubkey
	// otherwise privkey is initialized and we can use the cached value inside
	// of the private key.
  // Sign produces a signature on the provided message.
  // This assumes the privkey is wellformed in the golang format.
  // The first 32 bytes should be random,
  // corresponding to the normal ed25519 private key.
  // The latter 32 bytes should be the compressed public key.
  // If these conditions aren't met, Sign will panic or produce an
  // incorrect signature.

CyberChef


PRIVATE
MC4CAQAwBQYDK2VwBCIEIEhVylEZ4LjxnoCIlT1EMF9FRYSe/A3eWITizlUYCbEe
30 2e 02 01 00 30 05 06 03 2b 65 70 04 22 04 20 48 55 ca 51 19 e0 b8 f1 9e 80 88 95 3d 44 30 5f 45 45 84 9e fc 0d de 58 84 e2 ce 55 18 09 b1 1e
48 bytes with metadata

EhVylEZ4LjxnoCIlT1EMF9FRYSe/A3eWITizlUYCbEe
12 15 72 94 46 78 2e 3c 67 a0 22 25 4f 51 0c 17 d1 51 61 27 bf 03 77 96 21 38 b3 95 46 02 6c 47
32 bytes private key only


PUBLIC
MCowBQYDK2VwAyEAHz7qr/OJmQywhIoh+iilEBxuEmVdtIpokO4BET76cYQ=
30 2a 30 05 06 03 2b 65 70 03 21 00 1f 3e ea af f3 89 99 0c b0 84 8a 21 fa 28 a5 10 1c 6e 12 65 5d b4 8a 68 90 ee 01 11 3e fa 71 84
44 bytes with metadata

Hz7qr/OJmQywhIoh+iilEBxuEmVdtIpokO4BET76cYQ=
1f 3e ea af f3 89 99 0c b0 84 8a 21 fa 28 a5 10 1c 6e 12 65 5d b4 8a 68 90 ee 01 11 3e fa 71 84
32 bytes public key only

resulting key: 
88 char with padding
EhVylEZ4LjxnoCIlT1EMF9FRYSe/A3eWITizlUYCbEcfPuqv84mZDLCEiiH6KKUQHG4SZV20imiQ7gERPvpxhA==

remember to work using bytes, not hex or base64

https://stackoverflow.com/questions/60689653/openssl-eddsa-specify-key-size
https://ed25519.cr.yp.to/
https://blog.oddbit.com/post/2011-05-08-converting-openssh-public-keys/
http://luca.ntop.org/Teaching/Appunti/asn1.html
https://en.wikipedia.org/wiki/X.690#DER_encoding

68x base64 (?) ssh-keygen public
AAAAC3NzaC1lZDI1NTE5AAAAIKSMILVi3PAT/niaLELlBwCvbyJXPUmRGEZ8SqUIrtne
AAAAC3NzaC1lZDI1NTE5AAAAIGV3WZiCJ6eTQowmWeYHy4fSRQCqPyzIu51FYINX6TnU                     

324x base64 ssh-keygen private
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZWQyNTUxOQAAAC Bld1mYgienk0KMJlnmB8uH0kUAqj8syLudRWCDV+k51AAAAJCVoUD1laFA9QAAAAtzc2gtZWQyNTUxOQAAAC Bld1mYgienk0KMJlnmB8uH0kUAqj8syLudRWCDV+k51AAAAEAkoEmC613YsQBlRNfRODfFc/DTiYp/HkQ7VIBp3rH8QGV3WZiCJ6eTQowmWeYHy4fSRQCqPyzIu51FYINX6TnUA AAADHN0cm9waHlAVzU0MAE=
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZWQyNTUxOQAAAC CkjCC1YtzwE/54mixC5QcAr28iVz1JkRhGfEqlCK7Z3gAAAJDG5IHIxuSByAAAAAtzc2gtZWQyNTUxOQAAAC CkjCC1YtzwE/54mixC5QcAr28iVz1JkRhGfEqlCK7Z3gAAAEBwDJrMMW+CBWfqYiWv6nyjn6fSboPSj5iCai//2veooaSMILVi3PAT/niaLELlBwCvbyJXPUmRGEZ8SqUIrtneA AAADHN0cm9waHlAVzU0MAE=

contains lots of metadata, where is the actual key??
openssh-key-v1.....none....none...........3....ssh-ed25519... ewY..'§.B.&Yæ.Ë.ÒE.ª?,È».E`.Wé9Ô.....¡@õ.¡@õ....ssh-ed25519... ewY..'§.B.&Yæ.Ë.ÒE.ª?,È».E`.Wé9Ô...@$ I.ë]Ø±.eD×Ñ87ÅsðÓ....D;T.iÞ±ü@ewY..'§.B.&Yæ.Ë.ÒE.ª?,È».E`.Wé9Ô....strophy@W540.


88 char (no padding!?) taken from ssh-keygen privkey by guessing
EAkoEmC613YsQBlRNfRODfFc/DTiYp/HkQ7VIBp3rH8QGV3WZiCJ6eTQowmWeYHy4fSRQCqPyzIu51FYINX6TnUA






uhxOgEES6WcVzX6kWoKgyiZye7GrQj7NYBFg+lx7mfk=

Hashing!

node output
64 hex char, 32 byte
158054dd4c5500bdeaf99638417835aaa7024dbfe1f839b91cce4c35a509daa1

tenderdash output
40 hex char, 20 bytes
13ec102fd5f7167adabbec648304bc96ea145bf0
e65c13f532063f70e3a85f664f123915992753ff

just truncate it



TESTS
in
GOPjGoE5WRsjwEuetzXPrPsCYrMDtYdiVUnBl+j49IYuhyuqts+zXMxjPmjBwSBw24nZmB2sUJXMQ60X65u/tQ==
24 227 227 26 129 57 89 27 35 192 75 158 183 53 207 172 251 2 98 179 3 181 135 98 85 73 193 151 232 248 244 134 46 135 43 170 182 207 179 92 204 99 62 104 193 193 32 112 219 137 217 152 29 172 80 149 204 67 173 23 235 155 191 181
pub
46 135 43 170 182 207 179 92 204 99 62 104 193 193 32 112 219 137 217 152 29 172 80 149 204 67 173 23 235 155 191 181

