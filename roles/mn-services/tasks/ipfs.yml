---

- name: copy IPFS init script
  copy:
    src: ipfs/init.sh
    dest: '{{ mn_services_path }}/ipfs/'
    mode: +rx

- name: generate IPFS swarm key
  command: docker run --rm golang:1.9 sh -c 'go get github.com/Kubuxu/go-ipfs-swarm-key-gen/ipfs-swarm-key-gen && ipfs-swarm-key-gen'
  register: ipfs_swarm_key_gen
  when: inventory_hostname == groups.masternodes[0]

- set_fact:
    ipfs_swarm_key: '{{ ipfs_swarm_key_gen.stdout }}'
  when: inventory_hostname == groups.masternodes[0]

- set_fact:
    ipfs_swarm_key: '{{ hostvars[groups.masternodes[0]].ipfs_swarm_key }}'
  when: inventory_hostname != groups.masternodes[0]

- name: start IPFS bootstrap node
  environment:
    SWARM_KEY: '{{ ipfs_swarm_key }}'
  docker_service:
    project_name: mn_services
    project_src: '{{ mn_services_path }}'
    services:
      - ipfs
    state: present
    pull: yes
  register: output
  when: inventory_hostname == groups.masternodes[0]

- name: get IPFS bootstrap node ID
  command: docker exec mn_services_ipfs_1 ipfs id --format '<id>'
  register: ipfs_id_result
  when: inventory_hostname == groups.masternodes[0]

- name: get IPFS bootstrap node ID
  command: docker exec {{ mn_services_dir }}_ipfs_1 ipfs id --format '<id>'
  register: ipfs_id_result
  when: inventory_hostname == groups.masternodes[0]

- debug:
    var: ipfs_id_result.stdout
  when: inventory_hostname == groups.masternodes[0]

- set_fact:
    ipfs_swarm_peer: '/ip4/{{ hostvars[groups.masternodes[0]].private_ip }}/tcp/5001/ipfs/{{ ipfs_id_result.stdout }}'
  when: inventory_hostname == groups.masternodes[0]

- set_fact:
    ipfs_swarm_peer: '{{ hostvars[groups.masternodes[0]].ipfs_swarm_peer }}'
  when: inventory_hostname != groups.masternodes[0]

- name: stop IPFS bootstrap node
  docker_service:
    project_src: '{{ mn_services_path }}'
    services:
    - ipfs
    state: absent
  when: inventory_hostname == groups.masternodes[0]
