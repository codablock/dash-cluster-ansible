---

# Bootstrap

- name: Remove latency on masternodes before deployment starts
  hosts: masternodes
  become: true
  roles:
    - remove_fake_latency

- name: Set up swap and aws environment vars
  hosts: all
  gather_facts: true
  become: true
  pre_tasks:
    - name: Check if inside AWS
      ansible.builtin.uri:
        url: http://169.254.169.254/latest/meta-data
        timeout: 2
      register: aws_uri_check
      failed_when: false
    - name: Set AWS environment variable
      ansible.builtin.set_fact:
        is_aws_environment: '{{ aws_uri_check.status == 200 }}'
  roles:
    - role: aws
      when: is_aws_environment
    - swap

- name: Setup VPN
  hosts: vpn
  become: true
  roles:
    - role: openvpn
      when: openvpn_enabled
      tags: vpn

- name: Setup Python and Docker
  hosts: all
  become: true
  pre_tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
  vars:
    pip_package: python3-pip
    pip_install_packages:
      - name: docker
        version: "5.0.3"
      - name: docker-compose
        version: "1.29.2"
  roles:
    - geerlingguy.pip
    - role: geerlingguy.docker
      vars:
        docker_apt_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}"
        docker_install_compose: false
        docker_users:
          - ubuntu
    - docker_options
    - eternal_terminal

- name: Install AWS monitoring scripts
  hosts: all
  become: true
  roles:
    - role: Restless-ET.aws-scripts-mon
      aws_scripts_mon_options: "--mem-util --disk-space-util --disk-path=/ --swap-util"
      aws_scripts_mon_use_iam: true

- name: Install Zabbix monitoring on masternodes
  hosts: masternodes
  become: true
  roles:
    - role: zabbix
      when: zabbix == 1

# Install Dash Core

- name: Configure dashd cli and network logging
  hosts: all
  become: true
  roles:
    - role: tcpdumpd
      when: dashd_network_logging != 0
    - dash_cli

- name: Setup logs
  hosts: logs_nodes
  become: true
  roles:
    - elastic_stack

- name: Set up wallets
  hosts: wallet_nodes
  become: true
  roles:
    - role: dashd
      dashd_indexes: true
      dashd_zmq: true
      enable_wallet: true
      tags:
        - dashd
    - elastic_beats

- name: Set up miners
  hosts: miners
  become: true
  roles:
    - role: dashd
      tags:
        - dashd
    - elastic_beats

- name: Set up core on seed nodes
  hosts: seed_nodes
  become: true
  roles:
    - role: dashd
      dashd_listen: true
      dashd_zmq: true
      dashd_indexes: true
      tags:
        - dashd
    - elastic_beats

- name: Set up core on masternodes
  hosts: masternodes
  become: true
  pre_tasks:
    - name: Check inventory for masternodes
      ansible.builtin.set_fact:
        masternode: "{{ masternodes[inventory_hostname] }}"
      tags: always
      when: inventory_hostname in masternodes
    - name: Fail if no masternodes present
      ansible.builtin.fail:
        msg: Masternode not defined in network config
      when: masternode is not defined
  roles:
    - role: dashd
      dashd_listen: true
      dashd_zmq: true
      dashd_indexes: true
      tags:
        - dashd
    - mn_sentinel
    - mn_status_report
    - elastic_beats

# Start network

- name: Generate first block to leave IBD mode
  hosts: seed-1
  become: true
  roles:
    - role: generate_firstblock
      when: dash_network == "devnet" or dash_network == "regtest"

- name: Start miner
  hosts: miners
  become: true
  roles:
    - role: dashd_generate_miner
      when: dash_network != "mainnet"

- name: Setup faucet and insight
  hosts: web
  become: true
  roles:
    - multifaucet
    - role: dashd
      dashd_indexes: true
      dashd_zmq: true
      dashd_listen: true
    - insight
    - elastic_beats
  tags:
    - web

- name: Register masternodes
  hosts: wallet_nodes
  become: true
  roles:
    - mn_init

- name: Update inventory with protx values
  hosts: wallet_nodes
  roles:
    - mn_protx_config

- name: Activate sporks
  hosts: wallet_nodes
  become: true
  roles:
    - role: activate_dashd_sporks
      when: dash_network != "mainnet" and dash_network != "testnet"
      delegate_to: '{{ play_hosts | first }}'

# Start platform

- name: Set up platform on seed nodes
  hosts: seed_nodes
  become: true
  pre_tasks:
    - name: Check inventory for masternodes
      ansible.builtin.set_fact:
        node: "{{ seed_nodes[inventory_hostname] }}"
      tags: always
      when: inventory_hostname in seed_nodes
    - name: Check inventory for seed nodes
      ansible.builtin.fail:
        msg: Seed node not defined in network config
      when: node is not defined
  roles:
    - role: mn_evo_services
      tags:
        - evo
      when: evo_services
    - role: elastic_beats

- name: Set up platform on masternodes
  hosts: masternodes
  become: true
  pre_tasks:
    - name: Check inventory for masternodes
      ansible.builtin.set_fact:
        node: "{{ masternodes[inventory_hostname] }}"
      tags: always
      when: inventory_hostname in masternodes
    - name: Fail if no masternodes present
      ansible.builtin.fail:
        msg: Masternode not defined in network config
      when: node is not defined
  roles:
    - role: mn_evo_services
      tags:
        - evo
      when: evo_services
    - role: elastic_beats

- name: Set up fake latency on masternodes
  hosts: masternodes
  become: true
  roles:
    - role: add_fake_latency
      when: masternode_network_latency
    - role: remove_fake_latency
      when: not masternode_network_latency

- name: Clean up
  hosts: all
  become: true
  tasks:
    - name: Prune unused Docker images
      community.docker.docker_prune:
        containers: true
        images: true
        images_filters:
          dangling: false
        networks: true
        volumes: false
        builder_cache: true
