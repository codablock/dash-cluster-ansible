---

# Bootstrap

# Remove latency on masternodes before deployment starts (if enabled)
- hosts: masternodes
  become: true
  roles:
    - remove-fake-latency

- hosts: all
  gather_facts: true
  become: true
  pre_tasks:
    - name: check if inside AWS
      uri:
        url: http://169.254.169.254/latest/meta-data
        timeout: 2
      register: aws_uri_check
      failed_when: False
    - set_fact:
        is_aws_environment: "{{ aws_uri_check.status == 200 }}"
  roles:
    - role: aws
      when: is_aws_environment
    - swap

# Setup VPN

- hosts: vpn
  become: true
  roles:
    - role: openvpn
      when: openvpn_enabled
      tags: vpn

# Setup Python and Docker

- hosts: all
  become: true
  tasks:
    - name: update apt cache
      apt:
        update_cache: yes

- hosts: all
  become: true
  vars:
    pip_package: python3-pip
    pip_install_packages:
      - name: docker
        version: "5.0.3"
      - name: docker-compose
        version: "1.29.2"
  roles:
    - geerlingguy.pip
    - role: geerlingguy.docker
      vars:
        docker_apt_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}"
        docker_install_compose: false
        docker_users:
          - ubuntu
    - docker-options
    - eternal-terminal

# Install AWS monitoring scripts

- hosts: all
  become: true
  roles:
    - role: Restless-ET.aws-scripts-mon
      aws_scripts_mon_options: "--mem-util --disk-space-util --disk-path=/ --swap-util"
      aws_scripts_mon_use_iam: true

# Configure dashd cli and network logging (if enabled)

- hosts: all
  become: true
  roles:
    - role: tcpdumpd
      when: dashd_network_logging != 0
    - dash-cli

# Setup logs

- hosts: logs_nodes
  become: true
  roles:
    - elastic-stack

# Setup wallets and miners

- hosts: wallet_nodes
  become: true
  roles:
    - role: dashd
      dashd_indexes: true
      dashd_zmq: true
      tags:
        - dashd
    - elastic-beats

- hosts: miners
  become: true
  roles:
    - role: dashd
      tags:
        - dashd
    - elastic-beats

# Setup core on seed nodes

- hosts: seed_nodes
  become: true
  roles:
    - role: dashd
      dashd_listen: true
      dashd_zmq: true
      dashd_indexes: true
      tags:
        - dashd
    - elastic-beats

# Setup core on masternodes

- hosts: masternodes
  become: true
  pre_tasks:
    - set_fact:
        masternode: "{{ masternodes[inventory_hostname] }}"
      tags: always
      when: inventory_hostname in masternodes
    - fail:
        msg: Masternode not defined in network config
      when: masternode is not defined
  roles:
    - role: dashd
      dashd_listen: true
      dashd_zmq: true
      dashd_indexes: true
      tags:
        - dashd
    - mn-sentinel
    - mn-status-report
    - elastic-beats

# Generate first block on seed node
# so that all nodes leave IBD mode (required for mining)

- hosts: seed-1
  become: true
  roles:
    - role: generate-firstblock
      when: dash_network == "devnet" or dash_network == "regtest"

# Mine blocks

- hosts: miners
  become: true
  roles:
    - role: dashd-generate-miner
      when: dash_network != "mainnet"

# Setup faucet and insight

- hosts: web
  become: true
  roles:
    - multifaucet
    - role: dashd
      dashd_indexes: true
      dashd_zmq: true
      dashd_listen: true
    - insight
    - elastic-beats
  tags:
    - web

# Start masternodes

- hosts: masternode_wallet
  become: true
  roles:
    - mn-init

# Update inventory with protx values

- hosts: masternode_wallet
  roles:
    - mn-protx-config

# Activate sporks

- hosts: masternode_wallet
  become: true
  roles:
    - role: activate-dashd-sporks
      when: dash_network != "mainnet" and dash_network != "testnet"

# Setup platform on seed nodes

- hosts: seed_nodes
  become: true
  pre_tasks:
    - set_fact:
        node: "{{ seed_nodes[inventory_hostname] }}"
      tags: always
      when: inventory_hostname in seed_nodes
    - fail:
        msg: Seed node not defined in network config
      when: node is not defined
  roles:
    - role: mn-evo-services
      tags:
        - evo
      when: evo_services
    - role: elastic-beats

# Setup platform on masternodes

- hosts: masternodes
  become: true
  pre_tasks:
    - set_fact:
        node: "{{ masternodes[inventory_hostname] }}"
      tags: always
      when: inventory_hostname in masternodes
    - fail:
        msg: Masternode not defined in network config
      when: node is not defined
  roles:
    - role: mn-evo-services
      tags:
        - evo
      when: evo_services
    - role: elastic-beats


 # Set up fake latency on masternodes (if enabled)
- hosts: masternodes
  become: true
  roles:
    - role: add-fake-latency
      when: masternode_network_latency
    - role: remove-fake-latency
      when: not masternode_network_latency

# Prune unused Docker images

- hosts: all
  become: true
  tasks:
    - name: prune unused docker images
      shell: docker system prune -af
      tags: always
