---

- name: increase VM max map count to ES minimum
  sysctl:
    name: vm.max_map_count
    value: 262144
    state: present

- name: create elastic services and certs dirs
  file:
    path: '{{ certs_path }}/{{ inventory_hostname }}'
    state: directory
    recurse: true

# Partition and format data volume
- import_tasks: volume.yml

# Generate certificates on first logs node
- import_tasks: generate-certs.yml
  run_once: true
  delegate_to: '{{ play_hosts|first }}'

- name: Create temp dir and set permissions
  file:
    path: /tmp/ansible/{{ dash_network_name }}
    state: directory
    mode: '0777'

- name: fetch generated ca
  run_once: true
  fetch:
    src: '{{ bundle_path }}/ca.zip'
    dest: /tmp/ansible/{{ dash_network_name }}/
    flat: true

- name: fetch generated certs
  run_once: true
  fetch:
    src: '{{ bundle_path }}/certs.zip'
    dest: /tmp/ansible/{{ dash_network_name }}/
    flat: true

- name: install ca
  unarchive:
    src: /tmp/ansible/{{ dash_network_name }}/ca.zip
    dest: '{{ certs_path }}'

- name: install certs
  unarchive:
    src: /tmp/ansible/{{ dash_network_name }}/certs.zip
    dest: '{{ certs_path }}'

- name: copy files
  vars:
    template_seeds: "{{ groups.logs_nodes | reject('equalto', inventory_hostname) }}"
  template:
    src: '{{ item }}.j2'
    dest: '{{ elastic_path }}/{{ item }}'
  loop:
    - docker-compose.yml
    - elasticsearch.yml
    - kibana.yml

- name: start elastic
  docker_compose:
    project_src: '{{ elastic_path }}'
    state: present
    pull: yes
    restarted: yes
    services:
      - elasticsearch

- name: Wait for Elasticsearch to be available
  uri:
    url: http://localhost:9200
    user: '{{ elastic_username }}'
    password: '{{ elastic_password }}'
  register: response
  until: response.status == 200
  retries: 10
  delay: 10

- name: Set kibana_system password
  run_once: true
  uri:
    url: http://localhost:9200/_security/user/kibana_system/_password
    user: '{{ elastic_username }}'
    password: '{{ elastic_password }}'
    ca_path: '{{ certs_path }}/ca/ca.crt'
    method: POST
    body_format: json
    body:
      password: '{{ kibana_password }}'

- name: start kibana
  docker_compose:
    project_src: '{{ elastic_path }}'
    state: present
    pull: yes
    restarted: yes
    services:
      - kibana

- name: Wait for Kibana to be available
  uri:
    url: http://localhost:5601
    user: "{{ elastic_username }}"
    password: "{{ elastic_password }}"
  register: response
  until: response.status == 200
  retries: 10
  delay: 10

# Configure Elasticsearch and Kibana
- import_tasks: configure-cluster.yml
  run_once: true
  delegate_to: '{{ play_hosts|first }}'
