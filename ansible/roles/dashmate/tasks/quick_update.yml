# ---

- name: Set vars
  ansible.builtin.import_tasks: ./set_vars.yml

- name: Install dashmate
  ansible.builtin.import_tasks: ./install.yml
  when: dashmate_version is defined

- name: Retrieve dashmate version
  ansible.builtin.command: "{{ dashmate_cmd }} --version"
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_cwd }}'
  register: dashmate_version_result
  changed_when: dashmate_version_result.rc == 0

- name: Extract dashmate version
  ansible.builtin.set_fact:
    dashmate_config_version: "{{ (dashmate_version_result.stdout | split(' ') | first() | split('/'))[1] }}"


- name: Write dashmate config file
  vars:
    template_bootstrap_peers: "{{ groups.seed_nodes }}"
  ansible.builtin.template:
    src: dashmate.json.j2
    dest: '{{ dashmate_config_dir }}/config.json'
    owner: '{{ dashmate_user }}'
    group: '{{ dashmate_group }}'
    mode: "0644"
  register: template_result

- name: Update dashmate images
  ansible.builtin.command: "{{ dashmate_cmd }} update --format=json"
  become: true
  become_user: dashmate
  register: dashmate_update
  args:
    chdir: '{{ dashmate_cwd }}'
  changed_when: dashmate_update.rc == 0

- name: Get service statuses
  ansible.builtin.command: "{{ dashmate_cmd }} status services --format=json"
  become: true
  become_user: dashmate
  changed_when: dashmate_services_status.rc == 0
  args:
    chdir: '{{ dashmate_cwd }}'
  register: dashmate_services_status

- name: Set facts
  ansible.builtin.set_fact:
    is_core_started: >-
      {{
        dashmate_services_status.stdout |
        from_json |
        json_query('[?service==`core`&&status!=`not_started`]') |
        length | int > 0
      }}
    is_platform_started: >-
      {{
        dashmate_services_status.stdout |
        from_json |
        json_query('[?service!=`core`&&status!=`not_started`]') |
        length | int > 0
      }}
    is_core_images_updated: >-
      {{
        dashmate_update.stdout |
        from_json |
        json_query('[?name==`core`]') |
        sort(attribute='updated', reverse=true) |
        first() |
        json_query('updated')
      }}
    is_platform_images_updated: >-
      {{
        dashmate_update.stdout |
        from_json |
        json_query('[?name!=`core`]') |
        sort(attribute='updated', reverse=true) |
        first() |
        json_query('updated')
      }}
    is_dashmate_package_changed: "{{ dashmate_install_result.changed }}"
    is_dashmate_config_changed: "{{ template_result.changed }}"

- name: Print status
  ansible.builtin.debug:
    msg: "\nCore Started: {{ is_core_started }}
          \nPlatform Started: {{ is_platform_started }}
          \nCore Images Updated: {{ is_core_images_updated }}
          \nPlatform Images Updated: {{ is_platform_images_updated }}
          \nDashmate Package Updated: {{ is_dashmate_package_changed }}
          \nDashmate Config Changed: {{ is_dashmate_config_changed }}"

# Start logic:
# start ALL when (core is down and platform is down)
# start platform when (core is up and platform is down)

# Start all if everything is stopped (not started yet)
- name: Start all dashmate services
  ansible.builtin.command: "{{ dashmate_cmd }} start --verbose"
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_cwd }}'
  register: dashmate_start_all
  when:
    - not is_core_started
    - not is_platform_started
  changed_when: dashmate_start_all.rc == 0

# Restart logic
# dashmate version is changed => restart all
# dashmate config is changed => restart all

- name: Create host chunks to restart
  ansible.builtin.set_fact:
    host_chunks: "{{ play_hosts | batch(restart_chunk_size) }}"
  when:
    - not dashmate_start_all.changed
    - is_dashmate_package_changed or is_dashmate_config_changed
  run_once: true

- name: Print chunks info
  ansible.builtin.debug:
    msg: "Split {{ play_hosts | length }} into {{ host_chunks | length }} chunks to restart all services"
  when:
    - not dashmate_start_all.changed
    - is_dashmate_package_changed or is_dashmate_config_changed
  run_once: true

- name: Restart all dashmate services by chunks
  ansible.builtin.include_tasks: rolling_restart.yml
  loop: "{{ host_chunks }}"
  loop_control:
    loop_var: current_chunk
    index_var: current_chunk_index
    label: "{{ current_chunk }}"
  when:
    - not dashmate_start_all.changed
    - is_dashmate_package_changed or is_dashmate_config_changed
  run_once: true

# Force start logic
# Force start is equivalent to `docker compose up` and will replace services that have changed

- name: Start not started services and replace updated services
  ansible.builtin.command: "{{ dashmate_cmd }} start --force --verbose"
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_cwd }}'
  register: dashmate_force_start
  when:
    - not dashmate_start_all.changed
    - not dashmate_restart_all.changed
  changed_when: dashmate_force_start.rc == 0

- name: Disable dashmate helper build
  ansible.builtin.command: "{{ dashmate_cmd }} config set dashmate.helper.docker.build.enabled false"
  become: true
  become_user: dashmate
  register: build_dashmate_helper
  args:
    chdir: '{{ dashmate_cwd }}'
  changed_when: build_dashmate_helper.rc == 0
