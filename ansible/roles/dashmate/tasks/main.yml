---

- name: Create dashmate group
  ansible.builtin.group:
    name: '{{ dashmate_group }}'

- name: Create dashmate user
  ansible.builtin.user:
    name: '{{ dashmate_user }}'
    comment: 'Dashmate user'
    group: '{{ dashmate_group }}'
    home: '{{ dashmate_home }}'
    create_home: true
    umask: '0002'

- name: Adding dashmate to group docker
  ansible.builtin.user:
    name: 'dashmate'
    groups: docker
    append: true

- name: Write dash.conf file in /etc/
  ansible.builtin.template:
    src: dash.conf.j2
    dest: /etc/dash.conf
    owner: root
    group: root
    mode: "0644"

- name: Create all necessary config dirs
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ dashmate_user }}'
    group: '{{ dashmate_group }}'
    recurse: true
    mode: 0750
  loop:
    - '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}'

- name: Create logs dir
  ansible.builtin.file:
    path: '{{ dashmate_logs_dir }}'
    state: directory
    owner: '{{ dashmate_user }}'
    group: '{{ dashmate_group }}'
    recurse: true
    mode: 0755

- name: Configure log rotation
  ansible.builtin.include_role:
    name: arillso.logrotate
  vars:
    logrotate_applications:
      - name: platform-logs
        definitions:
          - logs:
              - '{{ dashmate_logs_dir }}/*.log'
            options:
              - rotate 7
              - daily
              - maxsize 1G
              - missingok
              - notifempty
              - copytruncate
              - compress
              - delaycompress

- name: Ensure logrotate runs hourly under systemd timer
  ansible.builtin.lineinfile:
    path: /lib/systemd/system/logrotate.timer
    regexp: '^OnCalendar=hourly'
    insertafter: '^OnCalendar=daily'
    line: OnCalendar=hourly

- name: Generate an OpenSSL private key
  community.crypto.openssl_privatekey:
    path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/private.key'
    # dapi-envoy docker user
    owner: 101
    group: 101

  # common name is required when loading into envoy
- name: Generate an OpenSSL Certificate Signing Request
  community.crypto.openssl_csr:
    path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/bundle.csr'
    privatekey_path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/private.key'
    common_name: '{{ inventory_hostname }}'

- name: Generate a Self Signed OpenSSL certificate
  community.crypto.x509_certificate:
    path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/bundle.crt'
    csr_path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/bundle.csr'
    privatekey_path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/private.key'
    provider: selfsigned
    # dapi-envoy docker user
    owner: 101
    group: 101

- name: Write config.json file in ~/.dashmate
  vars:
    template_bootstrap_peers: "{{ groups.seed_nodes | reject('equalto', inventory_hostname) }}"
  ansible.builtin.template:
    src: dashmate.json.j2
    dest: '{{ dashmate_config_dir }}/config.json'
    owner: '{{ dashmate_user }}'
    group: '{{ dashmate_group }}'
    mode: 0644

- name: Install some required dependencies for yarn build
  ansible.builtin.package:
    name:
      - cmake
      - libzmq3-dev
    state: present

- name: Enable corepack
  ansible.builtin.shell: |
    corepack enable
    touch /root/.corepack
  become: true
  become_user: root
  args:
    creates: /root/.corepack

- name: Clone dashmate source
  become: true
  become_user: dashmate
  ansible.builtin.git:
    repo: 'https://github.com/dashpay/platform'
    dest: '{{ dashmate_source_dir }}'
    version: '{{ platform_branch }}'
    single_branch: true
    depth: 1

- name: Install Yarn dependencies
  ansible.builtin.command: yarn
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
    creates: '{{ dashmate_source_dir }}/.yarn/unplugged'

- name: Build source
  ansible.builtin.command: yarn build
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}/packages/js-dash-sdk'
    creates: '{{ dashmate_source_dir }}/packages/js-dash-sdk/build'

# Check if dashmate is running and set var

- name: Check if dashmate is already running
  ansible.builtin.command: yarn dashmate status --format=json
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
  register: dashmate_status
  ignore_errors: true

# Restart dashmate if already running
- name: Restart dashmate services
  ansible.builtin.command: yarn dashmate restart
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
  register: dashmate_start
  when: dashmate_status.rc == 0
  # changed_when: "'Running services detected' not in dashmate_start.stderr"

# Start if not already running
- name: Start dashmate services
  ansible.builtin.command: yarn dashmate start
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
  register: dashmate_start
  when: dashmate_status.rc == 1
  # changed_when: "'Running services detected' not in dashmate_start.stderr"
