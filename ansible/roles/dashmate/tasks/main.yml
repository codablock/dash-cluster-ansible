---

- name: Create dashmate group
  ansible.builtin.group:
    name: '{{ dashmate_group }}'

- name: Create dashmate user
  ansible.builtin.user:
    name: '{{ dashmate_user }}'
    comment: 'Dashmate user'
    group: '{{ dashmate_group }}'
    home: '{{ dashmate_home }}'
    create_home: true
    shell: /bin/bash
    umask: '0002'

- name: Add dashmate user to docker group
  ansible.builtin.user:
    name: 'dashmate'
    groups: docker
    append: true

- name: Create all necessary config dirs
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ dashmate_user }}'
    group: '{{ dashmate_group }}'
    recurse: true
    mode: "0750"
  loop:
    - '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}'

- name: Write dash.conf for dash-cli
  ansible.builtin.template:
    src: dash.conf.j2
    dest: /etc/dash.conf
    owner: root
    group: root
    mode: "0644"

- name: Configure users for dash-cli
  ansible.builtin.include_role:
    name: dash_cli
    tasks_from: configure_users
  vars:
    dashmate_user_dict:
      user: '{{ dashmate_user }}'
      group: '{{ dashmate_group }}'
      dir: '{{ dashmate_home }}'
    users: '{{ system_users + [dashmate_user_dict] }}'

- name: Create logs dir
  ansible.builtin.file:
    path: '{{ dashmate_logs_dir }}'
    state: directory
    owner: '{{ dashmate_user }}'
    group: '{{ dashmate_group }}'
    recurse: true
    mode: "0755"

- name: Configure log rotation
  ansible.builtin.include_role:
    name: arillso.logrotate
  vars:
    logrotate_applications:
      - name: platform-logs
        definitions:
          - logs:
              - '{{ dashmate_logs_dir }}/*.log'
            options:
              - rotate 7
              - daily
              - maxsize 1G
              - missingok
              - notifempty
              - copytruncate
              - compress
              - delaycompress

- name: Ensure logrotate runs hourly under systemd timer
  ansible.builtin.lineinfile:
    path: /lib/systemd/system/logrotate.timer
    regexp: '^OnCalendar=hourly'
    insertafter: '^OnCalendar=daily'
    line: OnCalendar=hourly

- name: Generate an OpenSSL private key
  community.crypto.openssl_privatekey:
    path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/private.key'
    # dapi-envoy docker user
    owner: 101
    group: 101

  # common name is required when loading into envoy
- name: Generate an OpenSSL Certificate Signing Request
  community.crypto.openssl_csr:
    path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/bundle.csr'
    privatekey_path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/private.key'
    common_name: '{{ inventory_hostname }}'

- name: Generate a Self Signed OpenSSL certificate
  community.crypto.x509_certificate:
    path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/bundle.crt'
    csr_path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/bundle.csr'
    privatekey_path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}/private.key'
    provider: selfsigned
    # dapi-envoy docker user
    owner: 101
    group: 101

- name: Write config.json file in ~/.dashmate
  vars:
    template_bootstrap_peers: "{{ groups.seed_nodes | reject('equalto', inventory_hostname) }}"
  ansible.builtin.template:
    src: dashmate.json.j2
    dest: '{{ dashmate_config_dir }}/config.json'
    owner: '{{ dashmate_user }}'
    group: '{{ dashmate_group }}'
    mode: "0644"

- name: Install system dependencies
  ansible.builtin.package:
    name:
      - cmake
      - libzmq3-dev
      - clang
      - build-essential
      - libc-dev
      - libssl-dev
      - pkg-config
    state: present

- name: Install Rust
  ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  become: true
  become_user: dashmate
  args:
    creates: /home/dashmate/.rustup

# TODO: it should work without sourcing cargo env
- name: Install Rust dependencies
  ansible.builtin.shell: |
    . "$HOME/.cargo/env"
    rustup toolchain install stable
    rustup target add wasm32-unknown-unknown --toolchain stable
    cargo install -f wasm-bindgen-cli
  become: true
  become_user: dashmate
  args:
    executable: /bin/bash

- name: Enable corepack
  ansible.builtin.shell: |
    corepack enable
    touch /root/.corepack
  become: true
  become_user: root
  args:
    creates: /root/.corepack

- name: Clone dashmate source
  become: true
  become_user: dashmate
  ansible.builtin.git:
    repo: 'https://github.com/dashpay/platform'
    dest: '{{ dashmate_source_dir }}'
    version: '{{ platform_branch }}'
    single_branch: true
    depth: 1
  register: git

- name: Install Yarn dependencies
  ansible.builtin.command: yarn
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
    creates: '{{ dashmate_source_dir }}/.yarn/unplugged'

- name: Build sources
  ansible.builtin.shell: |
    . "$HOME/.cargo/env"
    yarn workspace @dashevo/wasm-dpp build
    yarn workspace dash build
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
    executable: /bin/bash
  when: git.changed

# TODO: It must build it with platform.sourcePath
- name: Build dashmate helper
  ansible.builtin.command: docker build -t dashmate_local -f ./packages/dashmate/Dockerfile .
  become: true
  become_user: dashmate
  register: build_dashmate_helper
  args:
    chdir: '{{ dashmate_source_dir }}'
  changed_when: build_dashmate_helper.rc == 0

- name: Check if dashmate is already running
  ansible.builtin.command: yarn dashmate status --format=json
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
  register: dashmate_status
  ignore_errors: true
  changed_when: dashmate_status.rc == 0

# TODO: Update smoke tests with HTTP API and remove it
# -----
#  temporary solution to avoid permission errors after running smoke tests
#  to be removed after dashmate json rpc
- name: Fix permissions before execute dashmate command
  ansible.builtin.file:
    path: "{ dashmate_config_dir }}"
    recurse: true
    owner: "{{ dashmate_user }}"
    group: "{{ dashmate_group }}"

- name: Fix permissions before execute dashmate command
  ansible.builtin.file:
    path: '{{ dashmate_config_dir }}/ssl/{{ dash_network_name }}'
    owner: "101"
    group: "101"
# -----

# Restart dashmate if already running
- name: Restart dashmate services
  ansible.builtin.command: yarn dashmate restart
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
  register: dashmate_restart
  when: dashmate_status.rc == 0
  changed_when: dashmate_restart.rc == 0

# Start if not already running
- name: Start dashmate services
  ansible.builtin.command: yarn dashmate start --verbose
  become: true
  become_user: dashmate
  args:
    chdir: '{{ dashmate_source_dir }}'
  register: dashmate_start
  when: dashmate_status.rc == 1
  changed_when: dashmate_start.rc == 0
